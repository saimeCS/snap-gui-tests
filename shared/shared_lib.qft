<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.2.0">
  <include>qfs.qft</include>
  <include>gpt.qft</include>
  <include>variables.qft</include>
  <dependency>../snap/lib/snap_main.qft</dependency>
  <dependency>../s3tbx/lib/s3tbx_main.qft</dependency>
  <PackageRoot id="_3">
    <Package id="_1p2J" name="check_external_file">
      <Procedure id="_9aq" name="file_exists_setGlobal">
        <variable name="fileName"/>
        <comment>@teststep Check if file was processed.</comment>
        <ServerScriptStep id="_1oGf" name="check_fileExists_setGlobal">
          <code>from java.io import File
rc.setGlobal("fileExists", File("$(fileName)").exists())</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_6ec" name="check_text_in_external_file">
        <variable name="file"/>
        <variable name="text"/>
        <variable name="file_example">C:\\Projects\\Testing\\SUT\\beam-u-testing\\test_pixEx\\test8_ATS_NR__2P_measurements.txt</variable>
        <ProcedureCall id="_1pEV"
                       procedure="check_external_file.file_exists_setGlobal">
          <variable name="fileName">$(file)</variable>
        </ProcedureCall>
        <IfSequence id="_AbX" test="&#34;$(fileExists)&#34;==&#34;True&#34;">
          <ServerScriptStep id="_6eb" name="Check_external_file">
            <code>fh = open("$(file)")
searchtext = "$(text)"

found = 0
for line in fh.readlines():
    if searchtext in line:
        found = 1
        break

if found == 0:
    rc.logError("Couldn't find '" + searchtext + "' in $(file)!")

fh.close()</code>
            <comment>Check an external file</comment>
          </ServerScriptStep>
          <ElseSequence id="_BkI">
            <ProcedureCall id="_1pEW" procedure="run-log.logError">
              <variable name="message">$(file) is not processed</variable>
              <variable name="withScreenshots">false</variable>
            </ProcedureCall>
          </ElseSequence>
        </IfSequence>
      </Procedure>
      <Procedure id="_1p2K" name="file_was_not_processed_else_shoot_error">
        <variable name="fileName"/>
        <comment>@teststep Check if file was not processed, else shoot error</comment>
        <ServerScriptStep id="_3+e" name="setLocal">
          <code>from java.io import File
rc.setLocal("fileExists", File("$(fileName)").exists())</code>
        </ServerScriptStep>
        <ServerScriptStep id="_3+f" name="check">
          <code>from java.io import File
if $(fileExists)==0:  rc.logMessage("OK")
else: rc.logError("$(fileName) has been written!")</code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_1o++" name="cleanup">
      <Procedure id="_1o-F" name="output_data_folder">
        <variable name="directory"/>
        <ProcedureCall id="_1o-p" procedure="variables.system_and_commando"/>
        <TestStep id="_1o-y" name="remove_output_folder">
          <SetGlobalStep id="_1o-q" local="true" varname="del_out_client">
            <default>del_out</default>
          </SetGlobalStep>
          <TryStep id="_1l9R" name="check_client_is_already_started">
            <ClientWaiter client="$(del_out_client)" id="_1pF1" timeout="10"/>
            <ProcedureCall id="_1pF2" procedure="utils.exit_program">
              <variable name="client_name">$(del_out_client)</variable>
            </ProcedureCall>
            <CatchSequence exception="ClientNotConnectedException" id="_1l9T"
                           maxerror="0"/>
          </TryStep>
          <ProcedureCall id="_1pFE" procedure="utils.exit_program">
            <variable name="client_name">$(del_out_client)</variable>
          </ProcedureCall>
          <ShellClientStarter client="$(del_out_client)"
                              command="$(delete_commando) $(directory)"
                              directory="${path:output_data_directory}"
                              id="_1o-r"/>
          <ProcedureCall id="_1o-s" procedure="utils.exit_program">
            <variable name="client_name">$(del_out_client)</variable>
          </ProcedureCall>
          <ProcedureCall id="_1p2N" procedure="utils.exit_program">
            <variable name="client_name">$(del_out_client)</variable>
          </ProcedureCall>
        </TestStep>
        <ProcedureCall id="_1pEw" procedure="utils.create_output_folder">
          <variable name="directory">$(directory)</variable>
        </ProcedureCall>
      </Procedure>
      <Procedure id="_1o-J" name="temp_dir">
        <variable name="client"/>
        <ProcedureCall id="_1oO8" procedure="path.main_path"/>
        <ProcedureCall id="_1oOJ" procedure="variables.system_and_commando"/>
        <TestStep id="_1o-K" name="delete">
          <IfSequence id="_1p1J" test="&#34;$(client)&#34;==&#34;s3tbx&#34;">
            <TestStep id="_1p1u" name="s3tbx_cache_folder">
              <SetGlobalStep id="_1p1L" local="true" varname="cn_cache">
                <default>del_cache</default>
              </SetGlobalStep>
              <ShellClientStarter client="$(cn_cache)"
                                  command="$(delete_commando) cache"
                                  directory="${path:temp_s3tbx}" id="_1p1M"/>
              <ProcedureCall id="_1p1O" procedure="utils.exit_program">
                <variable name="client_name">$(cn_cache)</variable>
              </ProcedureCall>
            </TestStep>
            <TestStep id="_1p1+" name="s3tbx_app_folder">
              <SetGlobalStep id="_1p23" local="true" varname="cn_app">
                <default>del_app</default>
              </SetGlobalStep>
              <ShellClientStarter client="$(cn_app)"
                                  command="$(delete_commando) s3tbx-app"
                                  directory="${path:temp_s3tbx}" id="_1p24"/>
              <ProcedureCall id="_1p25" procedure="utils.exit_program">
                <variable name="client_name">$(cn_app)</variable>
              </ProcedureCall>
            </TestStep>
            <TestStep id="_1p1v" name="s3tbx_ui_folder">
              <SetGlobalStep id="_1p1U" local="true" varname="cn_ui">
                <default>del_ui</default>
              </SetGlobalStep>
              <ShellClientStarter client="$(cn_ui)"
                                  command="$(delete_commando) snap-ui"
                                  directory="${path:temp_s3tbx}" id="_1p1V"/>
              <ProcedureCall id="_1p1W" procedure="utils.exit_program">
                <variable name="client_name">$(cn_ui)</variable>
              </ProcedureCall>
            </TestStep>
            <ElseifSequence id="_1p1X"
                            test="&#34;$(client)&#34;==&#34;snap&#34;">
              <TestStep id="_1p26" name="snap_cache_folder">
                <SetGlobalStep id="_1p1Z" local="true" varname="cn_cache">
                  <default>del_cache</default>
                </SetGlobalStep>
                <TryStep id="_1pFB">
                  <ShellClientStarter client="$(cn_cache)"
                                      command="$(delete_commando) ${path:temp_snap2}var${path:slash}cache"
                                      directory="${path:temp_snap2}var"
                                      id="_1pFC"/>
                  <CatchSequence exception="TestException" id="_1pFD"
                                 maxerror="0"/>
                </TryStep>
                <ProcedureCall id="_1p1c" procedure="utils.exit_program">
                  <variable name="client_name">$(cn_cache)</variable>
                </ProcedureCall>
              </TestStep>
              <TestStep id="_1p2B" name="snap_var_folder">
                <SetGlobalStep id="_1p1g" local="true" varname="del_snap_var">
                  <default>del_snap_var</default>
                </SetGlobalStep>
                <TryStep id="_1pF8">
                  <ShellClientStarter client="$(del_snap_var)"
                                      command="$(delete_commando) ${path:temp_snap}var"
                                      directory="${path:temp_snap}"
                                      id="_1pF9"/>
                  <CatchSequence exception="TestException" id="_1pFA"
                                 maxerror="0"/>
                </TryStep>
                <ProcedureCall id="_1p1j" procedure="utils.exit_program">
                  <variable name="client_name">$(del_snap_var)</variable>
                </ProcedureCall>
              </TestStep>
              <TestStep disabled="true" id="_1pEX"
                        name="snap_temporal_folder">
                <SetGlobalStep id="_1pEc" local="true" varname="cn_cache">
                  <default>del_temp_snap</default>
                </SetGlobalStep>
                <TryStep id="_1pEd">
                  <ShellClientStarter client="$(cn_cache)"
                                      command="$(delete_commando) ${path:temp_snap}"
                                      directory="${path:temp_snap}"
                                      id="_1pEZ"/>
                  <CatchSequence exception="TestException" id="_1pEe"
                                 maxerror="0"/>
                </TryStep>
                <ProcedureCall id="_1pEb" procedure="utils.exit_program">
                  <variable name="client_name">$(cn_cache)</variable>
                </ProcedureCall>
                <ProcedureCall disabled="true" id="_1pEa"
                               procedure="shellutils.removeDirectory">
                  <variable name="directory">${path:temp_snap}</variable>
                </ProcedureCall>
              </TestStep>
            </ElseifSequence>
          </IfSequence>
        </TestStep>
      </Procedure>
      <Procedure id="_1ky9" name="global_variables">
        <ServerScriptStep id="_1kyA" name="clearGlobals">
          <code>rc.clearGlobals()</code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_1o+s" name="run-log">
      <Package id="_1o+t" name="error_message">
        <Procedure id="_1p2O" name="expression_editor_does_not_appear">
          <ProcedureCall id="_1pEU" procedure="run-log.logError">
            <variable name="message">Expession Editor does not apper</variable>
            <variable name="withScreenshots">true</variable>
          </ProcedureCall>
        </Procedure>
        <Procedure id="_1oHy" name="dialog_Import_Product_does_not_appear">
          <ServerScriptStep id="_1lJB" name="error">
            <code>rc.logError("'ESA S-3 Toolbox - Import Product' dialog does not appear.")</code>
          </ServerScriptStep>
        </Procedure>
        <Procedure id="_1oI9" name="dialog_does_not_appear">
          <variable name="dialog"/>
          <ServerScriptStep id="_1oIA" name="error">
            <code>rc.logError("'$(dialog)' dialog does not appear.")</code>
          </ServerScriptStep>
        </Procedure>
        <Procedure id="_1oMq" name="error_dialog_appears">
          <variable name="dialog"/>
          <ServerScriptStep id="_1oMr" name="error">
            <code>rc.logError("'$(dialog)' dialog appears.")</code>
          </ServerScriptStep>
        </Procedure>
        <Procedure id="_1oMU" name="tool_does_not_appear">
          <variable name="tool"/>
          <ServerScriptStep id="_1oMV" name="error">
            <code>rc.logError("'$(tool)' does not appear.")</code>
          </ServerScriptStep>
        </Procedure>
        <Procedure id="_1oMY" name="node_does_not_exist">
          <variable name="node_name"/>
          <ServerScriptStep id="_1oMZ" name="error">
            <code>rc.logError("'$(node_name)' does not exist.")</code>
          </ServerScriptStep>
        </Procedure>
        <Procedure id="_1oMW" name="menu_item_is_disabled">
          <variable name="menu"/>
          <ServerScriptStep id="_1oMX" name="error">
            <code>rc.logError("Menu '$(menu)' is disabled.")</code>
          </ServerScriptStep>
        </Procedure>
      </Package>
      <Procedure id="_1o+-" name="make_screensot">
        <variable name="iw_name"/>
        <variable name="iw_name_example">error_dialog</variable>
        <ProcedureCall id="_1kjS"
                       procedure="qfs.run-log.screenshots.logScreenshotOfMonitor">
          <variable name="iw_name">$(iw_name)</variable>
          <variable name="iw_name_example">error_dialog</variable>
          <variable name="monitor">0</variable>
          <variable name="inSUT">false</variable>
          <variable name="title"/>
          <variable name="dontcompactify">false</variable>
          <variable name="report">true</variable>
        </ProcedureCall>
        <ProcedureCall id="_1oGq" procedure="path.main_path"/>
        <IfSequence id="_AM8" test="${qftest:windows}">
          <SetGlobalStep id="_1oGs" local="true" varname="image_path">
            <default>${path:screenshot_path2}</default>
          </SetGlobalStep>
          <ElseSequence id="_AM9">
            <SetGlobalStep id="_1oGt" local="true" varname="image_path">
              <default>${path:screenshot_path}</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <ServerScriptStep id="_AMA" name="screenshot">
          <code>from imagewrapper import ImageWrapper
iw = ImageWrapper(rc)
currenScreenshot = iw.grabScreenshot()
iw.savePng ("$(image_path)$(iw_name).png", currenScreenshot)
</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1o-0" name="log_client_output">
        <variable name="client_name"/>
        <TryStep id="_1o-m">
          <ServerScriptStep id="_1o-l" name="log_output">
            <code>rc.logMessage(rc.lookup("qftest", "client.output.$(client_name)", expand=False),
dontcompactify=True, report=True, nowrap=True)</code>
          </ServerScriptStep>
          <CatchSequence exception="TestException" id="_1o-n" maxerror="0"/>
        </TryStep>
        <ServerScriptStep disabled="true" id="_1o-+" name="log_output">
          <code>rc.logMessage(rc.lookup("qftest", "client.output.$(client_name)", expand=False),
dontcompactify=True, report=True, nowrap=True)</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1o-2" name="logError">
        <variable name="message"/>
        <variable name="withScreenshots"/>
        <comment>Write an error into the run-log.</comment>
        <IfSequence id="_1o-3" test="$(withScreenshots)">
          <TryStep id="_1o-4">
            <ClientScriptStep client="$(client)"
                              engine="${default:guiengine:}" id="_1o-5"
                              name="Try to log Error in SUT script to take screenshots of individual SUT windows.">
              <code>rc.logError(rc.lookup("message"))</code>
            </ClientScriptStep>
            <CatchSequence exception="TestException" id="_1o-6" maxerror="0">
              <ServerScriptStep id="_1o-7"
                                name="log error in server script - only screenshot of the whole screen is taken">
                <code>rc.logError(rc.lookup("message"))</code>
              </ServerScriptStep>
            </CatchSequence>
          </TryStep>
          <ElseSequence id="_1o-8">
            <ServerScriptStep id="_1o-9"
                              name="log error in server script - only screenshot of the whole screen is taken">
              <code>rc.logError(rc.lookup("message"))</code>
            </ServerScriptStep>
          </ElseSequence>
        </IfSequence>
      </Procedure>
    </Package>
    <Package id="_1o+z" name="tree">
      <Procedure id="_1o-a" name="expand">
        <variable name="tree_id"/>
        <ProcedureCall id="_1o-b" procedure="qfs.swing.tree.expandNodes">
          <variable name="id">$(tree_id)</variable>
          <variable name="callbackProc"/>
        </ProcedureCall>
      </Procedure>
      <Procedure id="_1o-c" name="rowCount">
        <variable name="tree_id"/>
        <SetGlobalStep id="_1o-d" local="true" varname="id">
          <default>$(tree_id)</default>
        </SetGlobalStep>
        <ComponentWaiter client="$(client)" component="$(id)" id="_1o-e"
                         timeout="$[rc.getOption(Options.OPT_PLAY_TIMEOUT_COMPONENT)]"/>
        <ClientScriptStep client="$(client)" engine="${default:guiengine:awt}"
                          id="_1o-f">
          <code>tree = rc.getComponent(rc.lookup("id"))

rowCount = tree.getRowCount()

rc.setGlobal("rowCount", rowCount)</code>
        </ClientScriptStep>
        <ServerScriptStep id="_1o-g" name="print">
          <code>print "$(rowCount)"</code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_1o-C" name="shellutils">
      <Procedure id="_1o-D" name="mkdir">
        <variable name="directory">aDirectory</variable>
        <comment>Create a given directory. It also creates non-existing parent directories.</comment>
        <ServerScriptStep id="_1o-E">
          <code>from java.io import File

directory = rc.lookup("directory")
directory = File(directory)
directory.mkdirs()

if directory.exists() == 0:
	raise UserException("Creating directory " + directory.getCanonicalPath() + " didn't work! Perhaps you have no permissions!")</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_6Sc" name="removeDirectory">
        <variable name="directory"/>
        <comment>Remove a given directory.</comment>
        <TryStep id="_1p0p">
          <ServerScriptStep id="_1p0q">
            <code>import shutil

directory = rc.lookup("directory")
try:
	shutil.rmtree (directory)
except:
	raise UserException("Removing directory " + directory + " didn't work! Perhaps you have no permissions!")

</code>
          </ServerScriptStep>
          <CatchSequence exception="TestException" id="_1p0r" maxerror="0"/>
        </TryStep>
        <ServerScriptStep disabled="true" id="_6Sd">
          <code>import shutil

directory = rc.lookup("directory")
try:
	shutil.rmtree (directory)
except:
	raise UserException("Removing directory " + directory + " didn't work! Perhaps you have no permissions!")

</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1o-H" name="deleteFile">
        <variable name="file">aFile</variable>
        <comment>Delete a file.</comment>
        <ServerScriptStep id="_1o-I">
          <code>from java.io import File

file = rc.lookup("file")
file = File(file)
file.delete()

if file.exists():
    rc.logMessage("File still exists. Waiting 1000 ms")
    from java.lang import Thread
    Thread.sleep(1000)
    if file.exists():
        file.delete()
        if file.exists():
            raise UserException("Cannot delete file " + file.getCanonicalPath() + ". Perhaps you don't have the required permissions!")</code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_1lAZ" name="utils">
      <Procedure id="_1pEr" name="create_output_folder">
        <variable name="directory"/>
        <ProcedureCall id="_1pEx" procedure="variables.system_and_commando"/>
        <SetGlobalStep id="_1pEt" local="true" varname="mkdir_client">
          <default>mkdir_client</default>
        </SetGlobalStep>
        <ShellClientStarter client="$(mkdir_client)"
                            command="$(mkdir_commando) $(directory)"
                            directory="${path:output_data_directory}"
                            id="_1pEu">
          <comment>MKDIR</comment>
        </ShellClientStarter>
        <ProcedureCall id="_1pEv" procedure="utils.exit_program">
          <variable name="client_name">$(mkdir_client)</variable>
        </ProcedureCall>
      </Procedure>
      <Procedure id="_9aQ" name="exit_program">
        <variable name="client_name"/>
        <TryStep id="_9aR" name="check if really stopped">
          <ClientWaiter client="$(client_name)" errorlevel="0" id="_1pEn"
                        raise="false" timeout="10"/>
          <TryStep id="_1pEo" name="wait_exit_program">
            <ProcessWaiter client="$(client_name)" errorlevel="0" id="_1o-V"
                           raise="false" timeout="1000"/>
            <CatchSequence exception="ClientNotTerminatedException" id="_9aT"
                           maxerror="0" name="notTerminated">
              <comment>The Wait for client to terminate node throws an exeption if it did not stop.
In this case we catch the exeption in this node and perform a hard close.
</comment>
              <ProcedureCall id="_1kwc" procedure="utils.terminate_process">
                <variable name="client_name">$(client_name)</variable>
              </ProcedureCall>
            </CatchSequence>
          </TryStep>
          <CatchSequence exception="TestException" id="_1pEq" maxerror="0"/>
        </TryStep>
      </Procedure>
      <Procedure id="_1o+u" name="terminate_process">
        <variable name="client_name"/>
        <TryStep id="_1o+v">
          <ClientWaiter client="$(client_name)" errorlevel="0" id="_1o+w"
                        raise="false" timeout="10"/>
          <ClientStopper client="$(client_name)" id="_1o+x" postdelay="200">
            <comment>A normal close did not work, so we simply terminate the application.
</comment>
          </ClientStopper>
          <CatchSequence exception="TestException" id="_1o+y" maxerror="0"/>
        </TryStep>
      </Procedure>
    </Package>
  </PackageRoot>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
